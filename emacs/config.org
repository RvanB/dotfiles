#+TITLE: Emacs Configuration
#+AUTHOR: Raiden van Bronkhorst
#+OPTIONS: toc:nil
#+STARTUP: overview

* Repos and main setup
** Set up package.el to work with MELPA
#+begin_src emacs-lisp
  
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-refresh-contents t)
#+end_src

** Initialize use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+end_src

** Always ensure packages
#+begin_src emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

** Use shell environment variables
#+begin_src emacs-lisp
(use-package exec-path-from-shell)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))  
#+end_src

* COMMENT Keybindings
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer rvb/leader-keys
			    :keymaps '(normal insert visual emacs)
			    :prefix "SPC"
			    :global-prefix "C-SPC")

    (rvb/leader-keys
     "k"  'kill-buffer
     "t"  'eshell-toggle
     "c"  'comment-or-uncomment-region
     ))
#+end_src

* CSV mode
#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

* Vertico/ Consult
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))


  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

** Marginalia
#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Org
** Set agenda files
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/docs/tasks.org"))
#+end_src

** Open todo list on startup
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (org-todo-list)
#+end_src
* Appearance
** Git gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :config
    (global-git-gutter-mode +1)
    )
#+end_src

** COMMENT Beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (progn
      (beacon-mode 1)
      ;;(setq beacon-push-mark 35)
      ;;(setq beacon-blink-when-point-moves-vertically 10)
      (setq beacon-color "#666600")))
#+end_src

** COMMENT Change theme
*** Modus Themes
#+begin_src emacs-lisp
  (use-package modus-themes)
  (setq modus-themes-bold-constructs t)
  (setq modus-themes-italic-constructs t)
  (setq modus-themes-mode-line '(3d))
  (load-theme 'modus-operandi t)
#+end_src

*** COMMENT Leuven
#+begin_src emacs-lisp
  (load-theme 'leuven t)
#+end_src

*** COMMENT Zenburn
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+end_src

** COMMENT Change Font
#+begin_src emacs-lisp
  ;; (set-face-font 'default "MonoLisa 12" nil)
  ;; http://blog.vivekhaldar.com/post/4809065853/dotemacs-extract-interactively-change-font-size

  (set-face-attribute 'default nil :height 180)
#+end_src

#+RESULTS:

** Disable bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Scrolling

#+begin_src emacs-lisp
  (setq scroll-margin 10
	scroll-conservatively 101
	scroll-up-aggressively 0.01
	scroll-down-aggressively 0.01
	scroll-preserve-screen-position t
	auto-window-vscroll nil)
#+end_src

** Modes and variables

*** Highlighted current line
#+begin_src emacs-lisp
  ;; let's enable it for all programming major modes
  (add-hook 'prog-mode-hook #'hl-line-mode)
  ;; and for all modes derived from text-mode
  (add-hook 'text-mode-hook #'hl-line-mode)
#+end_src

*** Other
#+begin_src emacs-lisp
  ;; (global-display-line-numbers-mode 1)
  (scroll-bar-mode -1)
  (set-default 'truncate-lines t)
  (global-auto-revert-mode t)

  (tool-bar-mode -1)
#+end_src

** COMMENT Highlight indentation
#+begin_src emacs-lisp
  (use-package highlight-indent-guides)
  (add-hook 'python-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'column)
#+end_src

* General Settings and Behavior
** Disable backup files
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

** Golden Ratio scrolling
#+begin_src emacs-lisp
  (use-package golden-ratio-scroll-screen
    :init
    (setq golden-ratio-scroll-highlight-flag nil)
    :config
    (global-set-key [remap scroll-down-command] 'golden-ratio-scroll-screen-down)
    (global-set-key [remap scroll-up-command] 'golden-ratio-scroll-screen-up)
    )
#+end_src

** Follow symlinks
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

** Expand-region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

** Which key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

** COMMENT Hungry delete
#+begin_src emacs-lisp
  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))
#+end_src

** Project switching
#+begin_src emacs-lisp
  (setq project-switch-commands
	'((project-find-file "Find file" nil)
	  (project-find-dir "Find directory" nil)
	  (magit-project-status "Magit" 109)))
#+end_src

** Tabs
#+begin_src emacs-lisp
  (tab-bar-mode)
  (setq tab-bar-new-tab-choice "*scratch*")
#+end_src
** Occur
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c o") 'occur)
#+end_src
