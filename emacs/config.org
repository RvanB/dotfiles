#+TITLE: Emacs Configuration
#+AUTHOR: Raiden van Bronkhorst
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args :results none

* Performance
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	   (format "%.2f seconds"
		   (float-time
		    (time-subtract after-init-time before-init-time)))
	   gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

  (use-package vlf
    :ensure t
    :config
    (require 'vlf-setup)
    (setq vlf-application 'dont-ask))
#+end_src

* Package Management
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  			 ("org" . "https://orgmode.org/elpa/")
  			 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
  			 ("elpa" . "https://elpa.gnu.org/packages/")))

  (unless package-archive-contents
    (package-refresh-contents t))

  ;; Install use-package if not already installed
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ;; Always ensure packages are installed
#+end_src

* Terminals
#+begin_src emacs-lisp
  (use-package eat)
#+end_src

* Completion and Selection
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t))

  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )

  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :bind
    ("M-A" . marginalia-cycle)
    :init
    (marginalia-mode))

  (use-package company)
  (add-hook 'after-init-hook 'global-company-mode)

#+end_src
  
* User Experience Enhancements  
#+begin_src emacs-lisp
  ;; User Experience Enhancements

  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (require 'tree-sitter)
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

  (use-package which-key
    :init
    (which-key-mode))

  (use-package expand-region
    :bind
    ("C-=" . er/expand-region))

  ;; (use-package golden-ratio-scroll-screen
  ;;   :custom
  ;;   (golden-ratio-scroll-highlight-flag nil)
  ;;   :bind
  ;;   ([remap scroll-down-command] . golden-ratio-scroll-screen-down)
  ;;   ([remap scroll-up-command] . golden-ratio-scroll-screen-up))

  (use-package savehist
    :init
    (savehist-mode))


  ;; ;; Window Splitting
  ;; (setq split-height-threshold 120
  ;;       split-width-threshold 160)

  ;; (defun my-split-window-sensibly (&optional window)
  ;;     "replacement `split-window-sensibly' function which prefers vertical splits"
  ;;     (interactive)
  ;;     (let ((window (or window (selected-window))))
  ;;         (or (and (window-splittable-p window t)
  ;;                  (with-selected-window window
  ;;                      (split-window-right)))
  ;;             (and (window-splittable-p window)
  ;;                  (with-selected-window window
  ;;                      (split-window-below))))))

  ;; (setq split-window-preferred-function #'my-split-window-sensibly)


#+end_src

* Functionality
#+begin_src emacs-lisp

  (use-package avy)
  (global-set-key (kbd "C-`") 'avy-goto-char-2)
  (global-set-key (kbd "C-~") 'avy-goto-line)

  (use-package annotate
    :hook
    (prog-mode . annotate-mode))

  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package magit)

  (use-package olivetti
    :bind (("C-c o" . olivetti-mode)))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))

  (use-package gptel
    :bind
    (("C-c g s" . gptel-send)))

  ;; Use eglot when available
  (use-package eglot
    :hook
    (prog-mode . eglot-ensure))

  ;; Create a major mode for .mrk files called MRK
  (define-derived-mode mrk-mode text-mode "MRK"
    "Major mode for editing .mrk files."
    ;; Define the syntax highlighting rules
    (font-lock-add-keywords
     nil
     '(("^=[0-9A-Z][0-9A-Z][0-9A-Z]" . font-lock-keyword-face) ;; Tags
       ("$[a-z0-9]" . font-lock-variable-name-face))) ;; Subfields

    (setq font-lock-defaults '(nil)))

  (add-to-list 'auto-mode-alist '("\\.mrk\\'" . mrk-mode))

  (require 'eglot)
  (add-to-list 'eglot-server-programs '(mrk-mode . ("/Users/rvanbron/test-lsp/.venv/bin/python" "/Users/rvanbron/test-lsp/test.py")))
  (add-hook 'mrk-mode-hook 'eglot-ensure)
#+end_src

* Appearance
#+begin_src emacs-lisp

  (use-package base16-theme
    :config
    (load-theme 'base16-default-dark t))

  (setq org-hide-emphasis-markers t)
  (set-face-attribute 'default nil :font "Menlo" :height 140)

  ;; Make xit count lines for correct line number width
  (setq display-line-numbers-width-start t)

  ;; Truncate lines
  (setq truncate-lines t)

#+end_src

* UI Tweaks
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (fringe-mode 0)
#+end_src

* Error Fixes
#+begin_src emacs-lisp
  (when (string= system-type "darwin")       
    (setq dired-use-ls-dired nil))
#+end_src

* Misc Settings
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
#+end_src
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq org-html-validation-link nil)
  (setq default-cursor-type 'bar)
  (setq scroll-margin 0
        scroll-conservatively 101
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01
        scroll-preserve-screen-position t
        auto-window-vscroll nil)
  (setq make-backup-files nil)
  (setq vc-follow-symlinks t)
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)
  (setq search-whitespace-regexp ".*?")
  (setq python-shell-completion-native-enable nil)

  (global-auto-revert-mode t)
#+end_src

* Mode Hooks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
#+end_src

* Custom Functions
#+begin_src emacs-lisp
  (defun rvb/back-to-indentation-or-beginning ()
    (interactive)
    (if (= (point) (progn (back-to-indentation) (point)))
        (beginning-of-line)))
  (global-set-key [remap move-beginning-of-line] 'rvb/back-to-indentation-or-beginning)
  (global-set-key [remap org-beginning-of-line] 'rvb/back-to-indentation-or-beginning)


  (defun rvb/pyright-config ()
    "Create a JSON configuration file for Python using a specified package manager to find the venv."
    (interactive)
    (let* ((directory (read-directory-name "Choose directory: "))
           (package-manager (completing-read "Choose package manager: " '("pipenv" "poetry" "uv")))
           (venv-path nil)
           (venv nil))
      (cond
       ((string-equal package-manager "pipenv")
        (with-temp-buffer
          (cd directory)
          (let ((full-path (shell-command-to-string "pipenv --venv")))
  	  (setq venv-path (file-name-directory (directory-file-name (string-trim full-path))))
            (setq venv (file-name-nondirectory (directory-file-name (string-trim full-path)))))))
       ((string-equal package-manager "poetry")
        (with-temp-buffer
          (cd directory)
          (let ((full-path (shell-command-to-string "poetry run poetry env info --path 2> /dev/null")))
            (setq venv-path (file-name-directory (directory-file-name (string-trim full-path))))
            (setq venv (file-name-nondirectory (directory-file-name (string-trim full-path)))))))
       ((string-equal package-manager "uv")
        (with-temp-buffer
          (cd directory)
          (setq venv-path (shell-command-to-string "uv env")))))
      (setq venv-path (string-trim venv-path))  ; Trim whitespace
      (let ((json-content
             (json-encode `((venvPath . ,venv-path)
                            (venv . ,venv)
                            (exclude . ["**/__pycache__/**/*"
                                        "**/*.pyc"
                                        "**/*.pyo"])
                            (reportMissingImports . t)
                            (reportMissingTypeStubs . t)
                            (typeCheckingMode . "basic")))))
        (let ((file-path (expand-file-name "pyrightconfig.json" directory)))
          (with-temp-file file-path
            (insert json-content))
          (message "Configuration file saved to %s" file-path)))))

#+end_src
