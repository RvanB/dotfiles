#+TITLE: Emacs Configuration
#+AUTHOR: Raiden van Bronkhorst
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args :results none

* Startup Performance
#+BEGIN_SRC emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+END_SRC

* Setup Package Archives
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents t))

  ;; Install use-package if not already installed
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ;; Always ensure packages are installed
#+END_SRC

* Core Packages
#+BEGIN_SRC emacs-lisp
  (use-package eat)

  (use-package vertico
    :init
    (vertico-mode)
    :custom
    (vertico-cycle t))

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  (use-package embark
    :bind
    ("C-." . embark-act))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package expand-region
    :bind
    ("C-=" . er/expand-region))

  (use-package which-key
    :init
    (which-key-mode))

  (use-package company
    :init
    (global-company-mode))

  (use-package annotate
    :hook
    (prog-mode . annotate-mode))

  (use-package magit)

  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))

  (use-package olivetti)

  (use-package modus-themes
    :init
    (setq modus-themes-bold-constructs t
	  modus-themes-italic-constructs t)
    :config
    (load-theme 'modus-vivendi t))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))

  (use-package marginalia
    :bind
    ("M-A" . marginalia-cycle)
    :init
    (marginalia-mode))

  (use-package golden-ratio-scroll-screen
    :custom
    (golden-ratio-scroll-highlight-flag nil)
    :bind
    ([remap scroll-down-command] . golden-ratio-scroll-screen-down)
    ([remap scroll-up-command] . golden-ratio-scroll-screen-up))
#+END_SRC

* UI Tweaks
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(fringe-mode 0)
#+END_SRC

* Misc Settings
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq org-adapt-indentation t)
  (setq org-html-validation-link nil)
  (setq default-cursor-type 'bar)
  (setq scroll-margin 10
	scroll-conservatively 101
	scroll-up-aggressively 0.01
	scroll-down-aggressively 0.01
	scroll-preserve-screen-position t
	auto-window-vscroll nil)
  (setq make-backup-files nil)
  (setq vc-follow-symlinks t)
  (setq split-width-threshold 1)
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)
  (setq search-whitespace-regexp ".*?")
  (setq python-shell-completion-native-enable nil)

  (global-auto-revert-mode t)
#+END_SRC

* Mode Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook #'hl-line-mode)
(add-hook 'text-mode-hook #'hl-line-mode)
#+END_SRC

* Custom Functions
#+BEGIN_SRC emacs-lisp
(defun back-to-indentation-or-beginning ()
  (interactive)
  (if (= (point) (progn (back-to-indentation) (point)))
      (beginning-of-line)))
(global-set-key [remap move-beginning-of-line] 'back-to-indentation-or-beginning)
(global-set-key [remap org-beginning-of-line] 'back-to-indentation-or-beginning)
#+END_SRC
