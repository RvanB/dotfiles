#+TITLE: Emacs Configuration
#+AUTHOR: Raiden van Bronkhorst
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args :results none

** Package installation configuration
*** Set up package.el to work with MELPA
    MELPA is a package repository that contains many packages that are
    not available in the default repositories.
    #+begin_src emacs-lisp
      (require 'package)
      (add-to-list 'package-archives
		   '("melpa" . "https://melpa.org/packages/"))
      (package-refresh-contents t)
    #+end_src

*** Initialize use-package
    Use-package is a package that allows you to configure packages in
    a declarative way. It is not necessary to use it, but it makes
    things easier.
    #+begin_src emacs-lisp
      (unless (package-installed-p 'use-package)
	(package-install 'use-package))
    #+end_src

*** Always ensure packages
    Ensuring packages means that they will be installed if they are
    not already installed. This is useful for packages that are not
    available in the default repositories.
    #+begin_src emacs-lisp
      (require 'use-package-ensure)
      (setq use-package-always-ensure t)
    #+end_src

*** Diminish
    Diminish is a package that allows you to hide minor modes from the
    mode line. This helps declutter the mode line.
    #+begin_src emacs-lisp
      (use-package diminish)
    #+end_src


** Utilities
*** Vertico and Embark
    Vertico is a package that replaces the default Emacs completion
    system. It is used by Embark, which is a package that allows you
    to act on things in the buffer. For example, you can act on
    buffers, files, and lines.
    
    #+begin_src emacs-lisp
      (use-package vertico
	:custom
	(vertico-cycle t)
	:init
	(vertico-mode)
	)

      ;; Persist history over Emacs restarts. Vertico sorts by history position.
      (use-package savehist
	:init
	(savehist-mode))

      ;; A few more useful configurations...
      (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
	(defun crm-indicator (args)
	  (cons (format "[CRM%s] %s"
			(replace-regexp-in-string
			 "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
			 crm-separator)
			(car args))
		(cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
	      '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	;; (setq read-extended-command-predicate
	;;       #'command-completion-default-include-p)

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))

      ;; Optionally use the `orderless' completion style.
      (use-package orderless
	:init
	;; Configure a custom style dispatcher (see the Consult wiki)
	;; (setq orderless-style-dispatchers '(+orderless-dispatch)
	;;       orderless-component-separator #'orderless-escapable-split-on-space)
	(setq completion-styles '(orderless basic)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles partial-completion)))))

      ;; Example configuration for Consult
      (use-package consult
	;; Replace bindings. Lazily loaded due by `use-package'.
	:bind (;; C-c bindings in `mode-specific-map'
	       ("C-c M-x" . consult-mode-command)
	       ("C-c h" . consult-history)
	       ("C-c k" . consult-kmacro)
	       ("C-c m" . consult-man)
	       ("C-c i" . consult-info)
	       ([remap Info-search] . consult-info)
	       ;; C-x bindings in `ctl-x-map'
	       ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	       ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	       ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	       ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	       ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	       ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	       ;; Custom M-# bindings for fast register access
	       ("M-#" . consult-register-load)
	       ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	       ("C-M-#" . consult-register)
	       ;; Other custom bindings
	       ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	       ;; M-g bindings in `goto-map'
	       ("M-g e" . consult-compile-error)
	       ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	       ("M-g g" . consult-goto-line)             ;; orig. goto-line
	       ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	       ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	       ("M-g m" . consult-mark)
	       ("M-g k" . consult-global-mark)
	       ("M-g i" . consult-imenu)
	       ("M-g I" . consult-imenu-multi)
	       ;; M-s bindings in `search-map'
	       ("M-s d" . consult-find)
	       ("M-s D" . consult-locate)
	       ("M-s g" . consult-grep)
	       ("M-s G" . consult-git-grep)
	       ("M-s r" . consult-ripgrep)
	       ("M-s l" . consult-line)
	       ("M-s L" . consult-line-multi)
	       ("M-s k" . consult-keep-lines)
	       ("M-s u" . consult-focus-lines)
	       ;; Isearch integration
	       ("M-s e" . consult-isearch-history)
	       :map isearch-mode-map
	       ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	       ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	       ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	       ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	       ;; Minibuffer history
	       :map minibuffer-local-map
	       ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	       ("M-r" . consult-history))                ;; orig. previous-matching-history-element

	;; Enable automatic preview at point in the *Completions* buffer. This is
	;; relevant when you use the default completion UI.
	:hook (completion-list-mode . consult-preview-at-point-mode)

	;; The :init configuration is always executed (Not lazy)
	:init

	;; Optionally configure the register formatting. This improves the register
	;; preview for `consult-register', `consult-register-load',
	;; `consult-register-store' and the Emacs built-ins.
	(setq register-preview-delay 0.5
	      register-preview-function #'consult-register-format)

	;; Optionally tweak the register preview window.
	;; This adds thin lines, sorting and hides the mode line of the window.
	(advice-add #'register-preview :override #'consult-register-window)

	;; Use Consult to select xref locations with preview
	(setq xref-show-xrefs-function #'consult-xref
	      xref-show-definitions-function #'consult-xref)

	;; Configure other variables and modes in the :config section,
	;; after lazily loading the package.
	:config

	;; Optionally configure preview. The default value
	;; is 'any, such that any key triggers the preview.
	;; (setq consult-preview-key 'any)
	;; (setq consult-preview-key "M-.")
	;; (setq consult-preview-key '("S-<down>" "S-<up>"))
	;; For some commands and buffer sources it is useful to configure the
	;; :preview-key on a per-command basis using the `consult-customize' macro.
	(consult-customize
	 consult-theme :preview-key '(:debounce 0.2 any)
	 consult-ripgrep consult-git-grep consult-grep
	 consult-bookmark consult-recent-file consult-xref
	 consult--source-bookmark consult--source-file-register
	 consult--source-recent-file consult--source-project-recent-file
	 ;; :preview-key "M-."
	 :preview-key '(:debounce 0.4 any))

	;; Optionally configure the narrowing key.
	;; Both < and C-+ work reasonably well.
	(setq consult-narrow-key "<") ;; "C-+"

	;; Optionally make narrowing help available in the minibuffer.
	;; You may want to use `embark-prefix-help-command' or which-key instead.
	;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

	;; By default `consult-project-function' uses `project-root' from project.el.
	;; Optionally configure a different project root function.
	;;;; 1. project.el (the default)
	;; (setq consult-project-function #'consult--default-project--function)
	;;;; 2. vc.el (vc-root-dir)
	;; (setq consult-project-function (lambda (_) (vc-root-dir)))
	;;;; 3. locate-dominating-file
	;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
	;;;; 4. projectile.el (projectile-project-root)
	;; (autoload 'projectile-project-root "projectile")
	;; (setq consult-project-function (lambda (_) (projectile-project-root)))
	;;;; 5. No project support
	;; (setq consult-project-function nil)
      )

    #+end_src
   
*** Expand-region
    Expand-region allows you to expand the region
    incrementally around text.
    #+begin_src emacs-lisp
      (use-package expand-region
	:bind ("C-=" . er/expand-region))
    #+end_src
*** Hungry delete
    Hungry delete allows you to delete whitespace hungrily.
    #+begin_src emacs-lisp
      (use-package hungry-delete
	:config
	(global-hungry-delete-mode))
    #+end_src
*** Which key
    Which key shows you the keybindings for the current prefix key.
    #+begin_src emacs-lisp
      (use-package which-key
	:config
	(which-key-mode))
    #+end_src
*** Vterm
    Vterm is a terminal emulator for Emacs. It is useful for running
    interactive programs.
    #+begin_src emacs-lisp
      (use-package vterm)
    #+end_src
*** Company mode
    Company mode provides alternate autocompletion.
    #+begin_src emacs-lisp
      (use-package company
	:diminish company-mode)
      (add-hook 'after-init-hook 'global-company-mode)
    #+end_src
*** Tree sitter
    Tree sitter is a package that provides several language parsers,
    which can be used for syntax highlighting and other things.
    #+begin_src emacs-lisp
      (use-package tree-sitter)
      (use-package tree-sitter-langs)
      (global-tree-sitter-mode)
      (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    #+end_src

*** Copilot
    Copilot is a package that provides autocompletion for Emacs. It
    uses machine learning to provide better completions.
    #+begin_src emacs-lisp
      (use-package s)
      (use-package dash)
      (use-package editorconfig)
      (use-package copilot
	:load-path (lambda () (expand-file-name "copilot.el" user-emacs-directory))
	;; don't show in mode line
	:diminish copilot-mode)

      (add-hook 'prog-mode-hook 'copilot-mode)

      ;; (defun rvb/copilot-accept-completion ()
      ;;   "Accept completion or indent."
      ;;   (interactive)
      ;;   (or (copilot-accept-completion)
      ;;       (indent-for-ntab-command)))

      ;; (define-key global-map (kbd "C-M-<tab>") #'rvb/copilot-accept-completion)
      (with-eval-after-load 'company
	;; disable inline previews
	(delq 'company-preview-if-just-one-frontend company-frontends))

      (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
      (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)

    #+end_src

*** Annotations
    Annotations allows you to add persistent annotations to your code
    without changing the code itself.
    #+begin_src emacs-lisp
      (use-package annotate)
      (add-hook 'prog-mode-hook 'annotate-mode)
    #+end_src

*** Magit
    Magit is a package that provides a Git interface for Emacs.
    #+begin_src emacs-lisp
      (use-package magit)
    #+end_src
*** Graphviz dot mode
    Graphviz is a graph visualization software.
    #+begin_src emacs-lisp
      (use-package graphviz-dot-mode
	:ensure t
	:config
	(setq graphviz-dot-indent-width 4))
    #+end_src
** Appearance
*** Rainbow Delimiters
    Rainbow delimiters provides rainbow colors for delimiters like
    parentheses, brackets, and braces.
    #+begin_src emacs-lisp
      (use-package rainbow-delimiters
	:config
	(add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+end_src   
*** COMMENT Git gutter
    Git gutter shows changes to files in the gutter.
    #+begin_src emacs-lisp
      (use-package git-gutter
	:config
	(global-git-gutter-mode +1)
	)
    #+end_src
    
*** Modes
    Disable the tool bar and scroll bar.
    #+begin_src emacs-lisp
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
    #+end_src

*** Fonts
    #+begin_src emacs-lisp
      (set-face-font 'default "Iosevka 16" nil)
      (set-face-attribute 'default nil :height 160)
    #+end_src

*** Themes
    The Modus themes are a set of themes that are designed to be
    accessible and easy on the eyes, while still being aesthetically
    pleasing. We load the light theme ~modus-operandi~ by default.
    #+begin_src emacs-lisp
      (use-package modus-themes)
      (setq modus-themes-bold-constructs t)
      (setq modus-themes-italic-constructs t)

      (load-theme 'modus-operandi t)
    #+end_src

*** Disable bell
    Disable the bell.
    #+begin_src emacs-lisp
      (setq ring-bell-function 'ignore)
    #+end_src

*** Highlighted current line
    Highlight the current line for programming and text modes.
    #+begin_src emacs-lisp
      ;; let's enable it for all programming major modes
      (add-hook 'prog-mode-hook #'hl-line-mode)
      ;; and for all modes derived from text-mode
      (add-hook 'text-mode-hook #'hl-line-mode)
    #+end_src
*** Org indentation
    Change org indentation so all lines follow the indentation of
    their headers.
    #+begin_src emacs-lisp
      (setq org-adapt-indentation t)
    #+end_src
*** Org bullets
    Org bullets provides a nice way to display bullets in org mode.
    #+begin_src emacs-lisp
      (use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+end_src
*** Marginalia
    Marginalia provides annotations for the Emacs minibuffer.
    #+begin_src emacs-lisp
      ;; Enable rich annotations using the Marginalia package
      (use-package marginalia
	;; Either bind `marginalia-cycle' globally or only in the minibuffer
	:bind (("M-A" . marginalia-cycle)
	       :map minibuffer-local-map
	       ("M-A" . marginalia-cycle))

	;; The :init configuration is always executed (Not lazy!)
	:init

	;; Must be in the :init section of use-package such that the mode gets
	;; enabled right away. Note that this forces loading the package.
	(marginalia-mode))
    #+end_src
*** Cursor
    Change the cursor to a bar.
    #+begin_src emacs-lisp
      (setq-default cursor-type 'bar) 
    #+end_src

** Settings and Behavior
*** Scrolling
    Cursor scrolling behavior
    #+begin_src emacs-lisp
      (setq scroll-margin 10
	    scroll-conservatively 101
	    scroll-up-aggressively 0.01
	    scroll-down-aggressively 0.01
	    scroll-preserve-screen-position t
	    auto-window-vscroll nil)
    #+end_src
    Golden ratio scrolling
    #+begin_src emacs-lisp
      (use-package golden-ratio-scroll-screen
	:init
	(setq golden-ratio-scroll-highlight-flag nil)
	:config
	(global-set-key [remap scroll-down-command] 'golden-ratio-scroll-screen-down)
	(global-set-key [remap scroll-up-command] 'golden-ratio-scroll-screen-up)
	)
    #+end_src
*** Auto revert buffers
    This will automatically revert buffers when they change on disk.
    #+begin_src emacs-lisp
      (global-auto-revert-mode t)
    #+end_src
   
*** Disable backup files
    #+begin_src emacs-lisp
      (setq make-backup-files nil)
    #+end_src

*** Follow symlinks
    This will allow Emacs to follow symlinks to files.
    #+begin_src emacs-lisp
      (setq vc-follow-symlinks t)
    #+end_src

*** Default Window splitting
    This will change the default window splitting behavior to split
    horizontally.
    #+begin_src emacs-lisp
      (setq split-width-threshold 1 )
    #+end_src
*** COMMENT Dim unfocused buffers
    Dim unfocused buffers.
    #+begin_src emacs-lisp
      (use-package auto-dim-other-buffers)
      (add-hook 'after-init-hook (lambda ()
				   (when (fboundp 'auto-dim-other-buffers-mode)
				     (auto-dim-other-buffers-mode t))))
    #+end_src
*** Search

    Change search functionality in Emacs to show the number of matches,
    and the current index of the selected match. Also treat spaces in
    searches as non-greedy wildcards.

    #+begin_src emacs-lisp
      ;; Add lazy count to isearch
      (setq isearch-lazy-count t)
      (setq lazy-count-prefix-format "(%s/%s) ")
      (setq lazy-count-suffix-format nil)

      ;; Treat space as non-greedy wildcard in normal isearch
      (setq search-whitespace-regexp ".*?")
    #+end_src

*** Python
    #+begin_src emacs-lisp
      (setq python-shell-completion-native-enable nil)
    #+end_src
*** Project switching
    These settings change the options when switching projects.
    #+begin_src emacs-lisp
      (setq project-switch-commands
	    '((project-find-file "Find file" nil)
	      (project-find-dir "Find directory" nil)
	      (magit-project-status "Magit" 109)
	      (project-execute-extended-command "Execute Extended Command" 101)
	      ))
    #+end_src
*** Use shell environment variables
    This makes Emacs mirror the shell environment variables.
    #+begin_src emacs-lisp
      (use-package exec-path-from-shell)
      (when (memq window-system '(mac ns x))
	(exec-path-from-shell-initialize))  
    #+end_src

*** Back to indentation or beginning
    Change the behavior of ~C-a~ to go to the beginning of the line or the first non-whitespace character.
    #+begin_src emacs-lisp
      (defun back-to-indentation-or-beginning () (interactive)
	     (if (= (point) (progn (back-to-indentation) (point)))
		 (beginning-of-line)))
      (global-set-key [remap move-beginning-of-line]
		      'back-to-indentation-or-beginning)
    #+end_src

